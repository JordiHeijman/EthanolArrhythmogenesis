[[model]]

[engine]
time = 0 bind time
    in [ms]

[membrane]
level = 0 bind pace

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0        50.0        2       5000        0
#1.0      50.0     0.5      1000     0

[[script]]
import myokit
import matplotlib.pyplot as pl
import numpy as np
import sys

CompModel = "Base_models/Human LV (Passini-2016) - 2D_original.mmt"

# Get model and protocol
m11, p11, s11 = myokit.load(CompModel)

bcl = 1000
p11 = myokit.Protocol()
p11.schedule(1,0,2.0,bcl,0)

drug = 80 #0.0 #0.8 #80 #400

ical = drug**1.3 / (drug**1.3 + 600**1.3) 
ik1 = (0.0919*drug**3 / (drug**3 + 0.1854**3)) - (0.3112*drug**1.8 / (drug**1.8 + 7.461**1.8))
ikr = drug**0.99 / (drug**0.99 + 608**0.99) ### Himmel 2007
ina = drug**3.1 / (drug**3.1 + 446**3.1)   
ito = drug**1.1 / (drug**1.1 + 2188**1.1)    
ileak = 1 + (drug**2.282)*1.238/(drug**2.282 + 35.32**2.282) ## based on murine ventricular CM #Mustroph JMCC 2018
incx = 1 + (drug**2.282)*1.238/(drug**2.282 + 35.32**2.282) ## based on murine ventricular CM #Mustroph JMCC 2018

diff_dose = 1 - (drug**0.99 / (drug**0.99 + 320**0.99))

s11 = myokit.Simulation (m11, p11, apd_var='membrane.V')

s11.pre (50*bcl)
    
m11.set_state(s11.state())

m11, p11, s11 = myokit.load(CompModel)
#m = get_model()

# Set up simulation
n = 400
dur = 100
s1s2 = 390 

p11=myokit.pacing.blocktrain(500,2,0,1,0) #(period, duration, offset=0, level=1.0, limit=0)
s11 = myokit.SimulationOpenCL(m11,p11, ncells=[n,n])
s11.set_paced_cells(3,n,0,0)
s11.set_conductance(3.6,3.6)#(0.9,0.9) ########################### cv=50 cm/s
s11.set_step_size(0.01)#0.005
         
s11.set_constant('parameters.K_o', 5.4)
s11.set_constant('parameters.Ca_o', 1.8)
s11.set_constant('parameters.Na_o', 140)   
s11.set_constant('parameters.ICaL_Block_ethanol', ical)
s11.set_constant('parameters.IK1_Block_ethanol', ik1)
s11.set_constant('parameters.IKr_Block_ethanol', ikr)
s11.set_constant('parameters.INa_Block_ethanol', ina)
s11.set_constant('parameters.Ito_Block_ethanol', ito)       
s11.set_constant('parameters.Ileak_Factor_ethanol', ileak)  
s11.set_constant('parameters.INCX_Factor_ethanol', incx)  
s11.set_constant('parameters.ICaL_Block', 0)
s11.set_constant('parameters.IK1_Block', 0)
s11.set_constant('parameters.IKr_Block', 0)
s11.set_constant('parameters.IKs_Block', 0)
s11.set_constant('parameters.IKur_Block', 0)
s11.set_constant('parameters.INa_Block', 0)
s11.set_constant('parameters.INaL_Block', 0)
s11.set_constant('parameters.INaK_Block', 0)
s11.set_constant('parameters.INCX_Block', 0)
s11.set_constant('parameters.Ito_Block', 0)       
s11.set_constant('membrane.diffusion_factor', diff_dose)         
         
s11.pre(1000)

# Set up logging
log = ['engine.time', 'membrane.V'] # 'Ca_Concentrations.Ca_i', 'I_Ki.I_ki'

#log = myokit.LOG_ALL
#log = myokit.LOG_STATE + myokit.LOG_BOUND   

log_interval = 10 #5
 
log = s11.run(dur, log=log, log_interval=log_interval)
p2=myokit.pacing.blocktrain(500,2, s1s2,1,1)#normal stim duration=0.5
s11.set_protocol(p2)
s11.set_paced_cells(n/2,n/2,0,0)

for i in range(1,9):
    print 'i = %d' % i
    log = s11.run(1500, log=log, log_interval=log_interval)
    
    block = log.block2d()
    Vm = block.get2d('membrane.V')
    maxval = np.max(Vm[len(Vm)-1].flatten())
    print maxval
    
    if maxval < -50:
        print 'no more activity detected'
        break
        
# Store
block = log.block2d()

block.save('Updated_2D_sims_passini_original_80mM_s1s2_390_diffopt.zip')
    
#except myokit.SimulationError as e:
#   print(e.message)

